#!/usr/bin/env node
import { promises as fs } from 'node:fs';
import path from 'node:path';

async function main() {
  const manifestPath = process.argv[2] || path.resolve('docs/baseball_manifest.json');
  const outPath = process.argv[3] || path.resolve('docs/parquet_catalog.md');

  const raw = await fs.readFile(manifestPath, 'utf-8');
  const manifest = JSON.parse(raw);

  const rows = [];
  for (const node of Object.values(manifest.nodes)) {
    if (node.resource_type !== 'model') continue;
    const schema = node.schema || 'unknown_schema';
    const table = node.name;
    const desc = (node.description || '').replace(/\n+/g, ' ').trim();
    const url = `https://data.baseball.computer/dbt/${schema}_${table}.parquet`;
    const columns = Object.entries(node.columns || {}).map(([col, info]) => `${col} (${info.data_type})`).join(', ');
    rows.push({ schema, table, desc, url, columns });
  }

  rows.sort((a, b) => a.schema.localeCompare(b.schema) || a.table.localeCompare(b.table));

  let md = '# Parquet Table Catalog\n\n';
  md += 'This file is auto-generated by `scripts/gen_parquet_catalog.mjs` from the dbt manifest.\n\n';
  for (const r of rows) {
    md += `## ${r.schema}.${r.table}\n`;
    if (r.desc) md += `${r.desc}\n\n`;
    md += `Parquet URL: \`${r.url}\`\n\n`;
    md += `Columns: ${r.columns}\n\n`;
  }

  await fs.writeFile(outPath, md, 'utf-8');
  console.log(`Catalog written to ${outPath}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
